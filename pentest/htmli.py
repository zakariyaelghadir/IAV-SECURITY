import json

# -*- coding: utf-8 -*-
#Gaurav
#  This program is free ; you can redistribute it and/or modify
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY;
#Author details
# Created this simple html scaner file according to my use hope it will be useful

import sys, requests, re, time, argparse, logs, html, os, datetime
from urllib.parse import parse_qsl, urlencode, urlsplit

timestamp = datetime.datetime.now().strftime("%Y_%m_%d_%H_%M_%S")
cwd = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, cwd + '/..')

work_dir = cwd + '/logs/'
print(work_dir)

# Définir le chemin du fichier JSON
json_file_path = 'report/analyse.json'

def save_result_to_json(result):
    try:
        # Si le fichier JSON existe déjà, chargez son contenu
        if os.path.exists(json_file_path):
            with open(json_file_path, 'r') as file:
                data = json.load(file)
        else:
            data = []

        # Ajouter le nouveau résultat à la structure de données
        data.append(result)

        # Enregistrer la structure de données mise à jour dans le fichier JSON
        with open(json_file_path, 'w') as file:
            json.dump(data, file, indent=4)

        print("Le résultat a été sauvegardé avec succès dans", json_file_path)
    except Exception as e:
        print("Une erreur s'est produite lors de la sauvegarde du résultat dans le fichier JSON:", str(e))


def scan_html(payload, url):
    param = dict(parse_qsl(urlsplit(url).query))
    tainted_params = {x: payload for x in param}
    logs.create_log(logs_des, "Params : " + str(tainted_params))
    if len(tainted_params) > 0:
        attack_url = urlsplit(url).geturl() + urlencode(tainted_params)
        resp = requests.post(url=attack_url, data=payload)
        if resp.status_code == 200:
            if payload in resp.text:
                attack_encode = html.escape(attack_url)
                logs.create_log(logs_des, "HTML Injection Found : " + str(attack_url))
                print("HTML Injection at %s\nInjection", attack_url)
            else:
                logs.create_log(logs_des, "No HTML Injection Found  : " + str(url))
                print("This URL is not Vulnerable")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-url', help='Plase enter valid URL example: http://testphp.vulnweb.com/listproducts.php?cat=2')
    parser.add_argument('-ul', help='Plase provide URL List File ')
    parser.add_argument('-d', required=True, help='Domain Name example: esds.co.in')
    args = parser.parse_args()
    url_s = args.url
    url_file = args.ul
    domain = args.d

    # store logs with domain name and timestamp
    logs_des = work_dir + str(domain) + timestamp + '.txt'

    logs.create_log(logs_des, "Scanning Started for : " + str(domain))
    payload = "<h1><a href='https://www.google.com/'> Vulnerable Link </a></h1>"
    logs.create_log(logs_des, "Payload Used : " + str(payload))

    ''''Execute for multiple URL'S'''
    if url_file:
        # read url list file and strip \n and close file
        fh = open(url_file)
        test = [line.rstrip() for line in fh.readlines()]
        fh.close()

        # REGEX that will match applicable urls ex: "php?cat=2"
        url_s = []
        pattern = '.*\?((.*=.*)(&?))+'
        print(test)
        for urls in test:
            if re.match(pattern, urls):
                apl_length = len(test)
                logs.create_log(logs_des, "Applicable urls count." + str(apl_length))
                scan_html(payload, urls)
            else:
                print("No applicable URL's found  ")
                logs.create_log(logs_des, "No Applicable URLs found." + str(urls))

    else:
        scan_html(payload, url_s)

    # Sauvegarder le résultat dans un fichier JSON
    save_result_to_json({
        "vulnerability": "HTMLi",
        "timestamp": timestamp,
        "domain": domain,
        "payload_used": payload,
        "result": "Some result here"  # Remplacez "Some result here" par votre résultat réel
    })