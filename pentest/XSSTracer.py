#!/usr/bin/python3
# Cross-Site Tracer v1.3 by 1N3
# https://crowdshield.com

import socket
import sys
import http.client
import json
import os


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def save_result(result):
    report_path = 'report/analyse.json'

    # Ensure the directory exists
    os.makedirs(os.path.dirname(report_path), exist_ok=True)

    # Read existing data
    if os.path.exists(report_path):
        with open(report_path, 'r') as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                data = []
    else:
        data = []

    # Append new result
    data.append(result)

    # Write updated data back to file
    with open(report_path, 'w') as f:
        json.dump(data, f, indent=4)


def main(argv):
    argc = len(argv)

    if argc <= 2:
        print(bcolors.OKBLUE + "    __  ______ _____ " + bcolors.ENDC)
        print(bcolors.OKBLUE + "    \ \/ / ___|_   _|" + bcolors.ENDC)
        print(bcolors.OKBLUE + "     \  /\___ \ | |  " + bcolors.ENDC)
        print(bcolors.OKBLUE + "     /  \ ___) || |  " + bcolors.ENDC)
        print(bcolors.OKBLUE + "    /_/\_|____/ |_|  " + bcolors.ENDC)
        print("")
        print(bcolors.OKBLUE + "+ -- --=[CBI Cross-Site Tracer " + bcolors.ENDC)
        sys.exit(0)

    target = argv[1]  # SET TARGET
    port = argv[2]  # SET PORT

    result_dict = {"name":"XST", "target": target, "port": port, "vulnerabilities": {}}

    if port == '443':
        print("Using HTTPS")
        headers = {
            'User-Agent': 'XSS Tracer v1.3 by 1N3 @ https://crowdshield.com',
            'Content-Type': 'application/x-www-form-urlencoded',
        }

        conn = http.client.HTTPSConnection(target)
        conn.request("GET", "/", "", headers)
        response = conn.getresponse()
        data = response.read()

        print('Response: ', response.status, response.reason)
        print('Data:')
        print(data.decode('utf-8'))

    else:
        buffer1 = b"TRACE / HTTP/1.1"
        buffer2 = b"Test: <script>alert(1);</script>"
        buffer3 = "Host: " + target + "\r\n\r\n"

        buffer4 = b"GET / HTTP/1.1"

        print("")
        print(bcolors.OKBLUE + "    __  ______ _____ " + bcolors.ENDC)
        print(bcolors.OKBLUE + "    \ \/ / ___|_   _|" + bcolors.ENDC)
        print(bcolors.OKBLUE + "     \  /\___ \ | |  " + bcolors.ENDC)
        print(bcolors.OKBLUE + "     /  \ ___) || |  " + bcolors.ENDC)
        print(bcolors.OKBLUE + "    /_/\_|____/ |_|  " + bcolors.ENDC)
        print("")
        print(bcolors.OKBLUE + "+ -- --=[CBI Cross-Site Tracer" + bcolors.ENDC)
        print(bcolors.OKBLUE + "+ -- --=[Target: {}:{}".format(target, port) + bcolors.ENDC)

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = s.connect_ex((target, int(port)))
        s.settimeout(1.0)

        if result == 0:
            s.send(buffer1 + b"\n")
            s.send(buffer2 + b"\n")
            s.send(buffer3.encode('utf-8'))
            data1 = s.recv(1024)
            s.close()

            script = "alert"
            xframe = "X-Frame-Options"

            # TEST FOR XST
            if script.lower() in data1.decode('utf-8').lower():
                print(bcolors.FAIL + "+ -- --=[Site vulnerable to Cross-Site Tracing!" + bcolors.ENDC)
                result_dict["vulnerabilities"]["Cross-Site Tracing"] = True
            else:
                print(bcolors.OKGREEN + "+ -- --=[Site not vulnerable to Cross-Site Tracing!" + bcolors.ENDC)
                result_dict["vulnerabilities"]["Cross-Site Tracing"] = False

            # TEST FOR HOST HEADER INJECTION
            frame_inject = "crowdshield"
            buffer1 = b"GET / HTTP/1.1"
            buffer2 = "Host: http://crowdshield.com\r\n\r\n"

            s3 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = s3.connect_ex((target, int(port)))
            s3.settimeout(1.0)
            s3.send(buffer1 + b"\n")
            s3.send(buffer2.encode('utf-8'))
            data3 = s3.recv(1024)
            s3.close()

            if frame_inject.lower() in data3.decode('utf-8').lower():
                print(bcolors.FAIL + "+ -- --=[Site vulnerable to Host Header Injection!" + bcolors.ENDC)
                result_dict["vulnerabilities"]["Host Header Injection"] = True
            else:
                print(bcolors.OKGREEN + "+ -- --=[Site not vulnerable to Host Header Injection!" + bcolors.ENDC)
                result_dict["vulnerabilities"]["Host Header Injection"] = False

            # TEST FOR CLICKJACKING AND CFS
            s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = s2.connect_ex((target, int(port)))
            s2.settimeout(1.0)
            s2.send(buffer4 + b"\n")
            s2.send(buffer3.encode('utf-8'))
            data2 = s2.recv(1024)
            s2.close()

            if xframe.lower() in data2.decode('utf-8').lower():
                print(bcolors.OKGREEN + "+ -- --=[Site not vulnerable to Cross-Frame Scripting!" + bcolors.ENDC)
                print(bcolors.OKGREEN + "+ -- --=[Site not vulnerable to Clickjacking!" + bcolors.ENDC)
                result_dict["vulnerabilities"]["Cross-Frame Scripting"] = False
                result_dict["vulnerabilities"]["Clickjacking"] = False
            else:
                print(bcolors.FAIL + "+ -- --=[Site vulnerable to Cross-Frame Scripting!" + bcolors.ENDC)
                print(bcolors.FAIL + "+ -- --=[Site vulnerable to Clickjacking!" + bcolors.ENDC)
                result_dict["vulnerabilities"]["Cross-Frame Scripting"] = True
                result_dict["vulnerabilities"]["Clickjacking"] = True

            # DISPLAY HEADERS
            print("")
            print(bcolors.WARNING + data1.decode('utf-8') + bcolors.ENDC)
            print(bcolors.WARNING + data2.decode('utf-8') + bcolors.ENDC)
            print("")
            print("")

        else:
            print(bcolors.WARNING + "+ -- --=[Port is closed!" + bcolors.ENDC)

    save_result(result_dict)


if __name__ == "__main__":
    main(sys.argv)
