#!/usr/bin/env python3
import json
import os
import nmap
import ipaddress
from colorama import Fore, Style, init

# Initialize colorama
init(autoreset=True)

# Lire les résultats précédents du fichier JSON
def load_previous_results(filename='report/result_scan.json'):
    if os.path.exists(filename):
        try:
            with open(filename, 'r') as infile:
                # Vérifier si le fichier est vide
                if os.stat(filename).st_size == 0:
                    return []
                return json.load(infile)
        except (json.JSONDecodeError, ValueError):
            # Si le fichier est corrompu ou ne contient pas un JSON valide
            return []
    return []

# Enregistrer les résultats dans le fichier JSON
def save_results(scan_results, filename='report/result_scan.json'):
    with open(filename, 'w') as outfile:
        json.dump(scan_results, outfile, indent=4)

# Charger les résultats précédents
scan_results = load_previous_results()

# Fonction pour scanner tous les VLANs d'un réseau sans scanner les ports
def scan_all_vlans(network_ip):
    for i in range(256):
        subnet = f"{network_ip.split('.')[0]}.{network_ip.split('.')[1]}.{i}.0/24"
        nm = nmap.PortScanner()
        nm.scan(hosts=subnet, arguments='-sn')

        hosts_up = [host for host in nm.all_hosts() if nm[host]['status']['state'] == 'up']
        if hosts_up:
            print(f"\n{Fore.GREEN}Subnet {subnet}:")
            subnet_results = {
                "subnet": subnet,
                "hosts": []
            }
            for host in hosts_up:
                print(f"{Fore.YELLOW}Host: {host} is UP")
                subnet_results["hosts"].append({"host": host, "status": "UP"})
            scan_results.append(subnet_results)

    # Enregistrer les résultats dans un fichier JSON
    save_results(scan_results)
    return scan_results

# Fonction pour scanner tous les ports d'une seule machine avec des arguments spécifiés
def scan_single_host(target_ip):
    nm = nmap.PortScanner()
    nm.scan(hosts=target_ip, arguments='-p 1-65535 -T4 -sV -A')
    for host in nm.all_hosts():
        print(f"\n{Fore.BLUE}{'-' * 50}")
        print(f"{Fore.GREEN}Host: {host} {Fore.RESET}(Service Info: {nm[host].hostname()})")
        host_results = {
            "host": host,
            "hostname": nm[host].hostname(),
            "protocols": []
        }
        for proto in nm[host].all_protocols():
            print(f"\n{Fore.MAGENTA}{'-' * 25}")
            print(f"{Fore.CYAN}Protocol: {proto}")
            proto_results = {
                "protocol": proto,
                "ports": []
            }
            lport = nm[host][proto].keys()
            sorted(lport)
            for port in lport:
                print(f"\n{Fore.YELLOW}Port: {port}")
                port_details = {}
                for key, value in nm[host][proto][port].items():
                    print(f"\t{key}: {value}")
                    port_details[key] = value
                proto_results["ports"].append({"port": port, "details": port_details})
            host_results["protocols"].append(proto_results)
        scan_results.append(host_results)

    # Enregistrer les résultats dans un fichier JSON
    save_results(scan_results)
    return scan_results

# Fonction pour scanner un VLAN spécifique
def scan_vlan(vlan_ip):
    nm = nmap.PortScanner()
    nm.scan(hosts=vlan_ip, arguments='-p 1-65535 -T4 -sV')
    vlan_results = []
    for host in nm.all_hosts():
        print(f"\n{Fore.BLUE}{'-' * 50}")
        print(f"{Fore.GREEN}Host: {host} {Fore.RESET}(Service Info: {nm[host].hostname()})")
        host_details = {
            "host": host,
            "hostname": nm[host].hostname(),
            "services": []
        }
        for proto in nm[host].all_protocols():
            for port in nm[host][proto].keys():
                if nm[host][proto][port]['state'] == 'open':
                    service_info = {
                        "port": port,
                        "service": nm[host][proto][port]['name'],
                        "version": nm[host][proto][port].get('version', 'Unknown'),
                        "product": nm[host][proto][port].get('product', 'Unknown'),
                        "extrainfo": nm[host][proto][port].get('extrainfo', 'Unknown')
                    }
                    print(f"\n{Fore.YELLOW}Port: {port}\n\t{Fore.GREEN}Service: {service_info['service']}\n\t{Fore.CYAN}Version: {service_info['version']}\n\t{Fore.MAGENTA}Product: {service_info['product']}\n\t{Fore.RED}Extra Info: {service_info['extrainfo']}")
                    host_details["services"].append(service_info)
        vlan_results.append(host_details)
    scan_results.extend(vlan_results)

    # Enregistrer les résultats dans un fichier JSON
    save_results(scan_results)
    return vlan_results

# Menu principal
def main_menu():
    print("\n\n\n")
    print("\t\t\t*****************************************")
    print("\t\t\t*\t\t\t\t\t*")
    print("\t\t\t*\t"+f"{Fore.CYAN}    Scanning Menu \t\t*")
    print("\t\t\t*\t\t\t\t\t*")
    print("\t\t\t*****************************************")
    print("\t\t\t*\t\t\t\t\t*")
    print("\t\t\t*\t"+f"{Fore.YELLOW}1. Scanner tous les VLANs\t*")
    print("\t\t\t*\t\t\t\t\t*")
    print("\t\t\t*\t"+f"{Fore.YELLOW}2. Scanner un VLAN\t\t*")
    print("\t\t\t*\t\t\t\t\t*")
    print("\t\t\t*\t"+f"{Fore.YELLOW}3. Scanner un hôte\t\t*")
    print("\t\t\t*\t\t\t\t\t*")
    print("\t\t\t*\t"+f"{Fore.RED}0. Quitter\t\t\t*")
    print("\t\t\t*\t\t\t\t\t*")
    print("\t\t\t*****************************************")
    print("\n\n\n")
    while True:
        choice = input("Choisissez une option (0, 1, 2 ou 3): ")
        if choice == '1':
            while True:
                network_ip = input(f"\n{Fore.CYAN}Veuillez entrer l'adresse IP du réseau à scanner (e.g., 189.10.0.0/16): ")
                try:
                    network = ipaddress.ip_network(network_ip)
                    print(f"{Fore.GREEN}Vous avez saisi une adresse IP de réseau valide.")
                    break
                except ValueError:
                    print(f"{Fore.RED}Vous avez saisi une adresse IP de réseau invalide.")
            print(f"\n{Fore.BLUE}Lancement du scan de tous les VLANs...")
            print(scan_all_vlans(str(network)))
            break
        elif choice == '2':
            while True:
                vlan_ip = input(f"\n{Fore.CYAN}Veuillez entrer l'adresse IP du VLAN à scanner (e.g., 189.10.10.0/24): ")
                try:
                    vlan = ipaddress.ip_network(vlan_ip)
                    print(f"{Fore.GREEN}Vous avez saisi une adresse IP de VLAN valide.")
                    break
                except ValueError:
                    print(f"{Fore.RED}Vous avez saisi une adresse IP de VLAN invalide.")
            print(f"\n{Fore.BLUE}Lancement du scan du VLAN...")
            print(scan_vlan(str(vlan)))
            break
        elif choice == '3':
            while True:
                target_ip = input(f"\n{Fore.CYAN}Veuillez entrer l'adresse IP de l'hôte à scanner (e.g., 192.168.1.1): ")
                try:
                    ip_address_obj = ipaddress.ip_address(target_ip)
                    print(f"{Fore.GREEN}Vous avez saisi une adresse IP valide.")
                    break
                except ValueError:
                    print(f"{Fore.RED}Vous avez saisi une adresse IP invalide.")
            print(f"\n{Fore.BLUE}Lancement du scan de l'hôte...")
            print(scan_single_host(target_ip))
            #break
        elif choice == '0':
            print("Quitter le programme.")
            print()
            break
        else:
            print(f"{Fore.RED}Choix invalide. Veuillez choisir 1, 2 ou 3.")

# Exécution du menu principal
if __name__ == '__main__':
    os.system("clear")
    main_menu()
    input(Fore.RED + "click enter to exit")
